
PFI-modbus_master-LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bdf  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab4  00000000  00000000  00000f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000438  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c1  00000000  00000000  0000242b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_17>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a2 30       	cpi	r26, 0x02	; 2
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  cc:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <__vector_17>:

/**
*@brief  Interruption qui met cinqCentMSFlag à 1 à chaques 250ms.
*/
ISR(TIMER1_COMPA_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
	cinqCentMSFlag = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cinqCentMSFlag>
	PORTC ^= (1<<7);
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	80 58       	subi	r24, 0x80	; 128
  ea:	88 b9       	out	0x08, r24	; 8
}
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <ledControl>:

void ledControl(uint8_t stateSystem)
{
	switch (stateSystem)
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	d9 f0       	breq	.+54     	; 0x132 <ledControl+0x3a>
  fc:	28 f4       	brcc	.+10     	; 0x108 <ledControl+0x10>
  fe:	88 23       	and	r24, r24
 100:	49 f0       	breq	.+18     	; 0x114 <ledControl+0x1c>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	71 f0       	breq	.+28     	; 0x122 <ledControl+0x2a>
 106:	08 95       	ret
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	19 f1       	breq	.+70     	; 0x152 <ledControl+0x5a>
 10c:	d0 f0       	brcs	.+52     	; 0x142 <ledControl+0x4a>
 10e:	85 30       	cpi	r24, 0x05	; 5
 110:	41 f1       	breq	.+80     	; 0x162 <ledControl+0x6a>
 112:	08 95       	ret
	{
		case 0:
		_DEL_R_VALUE(0);
 114:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
		_DEL_V_VALUE(0);
 118:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
		_DEL_B_VALUE(0);
 11c:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		break;
 120:	08 95       	ret
		case 1:
		_DEL_R_VALUE(255);
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
		_DEL_V_VALUE(0);
 128:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
		_DEL_B_VALUE(0);
 12c:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		break;
 130:	08 95       	ret
		case 2:
		_DEL_R_VALUE(0);
 132:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
		_DEL_V_VALUE(255);
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
		_DEL_B_VALUE(0);
 13c:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		break;
 140:	08 95       	ret
		case 3:
		_DEL_R_VALUE(0);
 142:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
		_DEL_V_VALUE(0);
 146:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
		_DEL_B_VALUE(255);
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		break;
 150:	08 95       	ret
		case 4:
		_DEL_R_VALUE(255);
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
		_DEL_V_VALUE(255);
 158:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
		_DEL_B_VALUE(255);
 15c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		break;
 160:	08 95       	ret
		case 5:
		if (cinqCentMSFlag && !flashFlag)
 162:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cinqCentMSFlag>
 166:	88 23       	and	r24, r24
 168:	79 f0       	breq	.+30     	; 0x188 <ledControl+0x90>
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	81 11       	cpse	r24, r1
 170:	1f c0       	rjmp	.+62     	; 0x1b0 <ledControl+0xb8>
		{
			cinqCentMSFlag = 0;
 172:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <cinqCentMSFlag>
			flashFlag = 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			_DEL_R_VALUE(0);
 17c:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
			_DEL_V_VALUE(0);
 180:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
			_DEL_B_VALUE(0);
 184:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		}
		if (cinqCentMSFlag && flashFlag)
 188:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cinqCentMSFlag>
 18c:	88 23       	and	r24, r24
 18e:	a1 f0       	breq	.+40     	; 0x1b8 <ledControl+0xc0>
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 194:	88 23       	and	r24, r24
 196:	81 f0       	breq	.+32     	; 0x1b8 <ledControl+0xc0>
		{
			cinqCentMSFlag = 0;
 198:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <cinqCentMSFlag>
			flashFlag = 0;
 19c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			_DEL_R_VALUE(255);
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
			_DEL_V_VALUE(0);
 1a6:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
			_DEL_B_VALUE(0);
 1aa:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		}
		break;
	}
}
 1ae:	08 95       	ret
			flashFlag = 1;
			_DEL_R_VALUE(0);
			_DEL_V_VALUE(0);
			_DEL_B_VALUE(0);
		}
		if (cinqCentMSFlag && flashFlag)
 1b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cinqCentMSFlag>
 1b4:	81 11       	cpse	r24, r1
 1b6:	f0 cf       	rjmp	.-32     	; 0x198 <ledControl+0xa0>
 1b8:	08 95       	ret

000001ba <_timer1Init>:
void _timer1Init()
{
	//TCCR1A : COM1A1 COM1A0 COM1B1 COM1B0 COM1C1 COM1C0 WGM11 WGM10
	//TCCR1B: ICNC1 ICES1  WGM13 WGM12 CS12 CS11 CS10
	//TIMSK1:   ICIE1  OCIE1C OCIE1B OCIE1A TOIE1
	TCCR1B = (1<<WGM12); //mode CTC.
 1ba:	e1 e8       	ldi	r30, 0x81	; 129
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12); //Prescaler de 256.
 1c2:	80 81       	ld	r24, Z
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
 1c8:	ef e6       	ldi	r30, 0x6F	; 111
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	80 83       	st	Z, r24
	OCR1A = 15625-1; //62.5ns * 256 * 31250 = 250ms.
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	9d e3       	ldi	r25, 0x3D	; 61
 1d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	sei();
 1de:	78 94       	sei
 1e0:	08 95       	ret

000001e2 <_timer4Init>:
	//TCCR4A: COM4A1 COM4A0 COM4B1 COM4B0 FOC4A FOC4B PWM4A PWM4B
	//TCCR4B: PWM4X PSR4 DTPS41 DTPS40 CS43 CS42 CS41 CS40
	//TCCR4C: COM4A1S COM4A0S COM4B1S COMAB0S COM4D1 COM4D0 FOC4D PWM4D
	//TCCR4D: FPIE4 FPEN4 FPNC4 FPES4 FPAC4 FPF4 WGM41 WGM40
	//TCCR4E: TLOCK4 ENHC4 OC4OE5 OC4OE4 OC4OE3 OC4OE2 OC4OE1 OC4OE0
	TCCR4C = 0b00001001; //PWM output OC4D.
 1e2:	89 e0       	ldi	r24, 0x09	; 9
 1e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	TCCR4A = 0b10100011; //PWM output OC4A et OC4B.
 1e8:	83 ea       	ldi	r24, 0xA3	; 163
 1ea:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	TCCR4B = 0b00000100; //Prescaler de 4.
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	OCR4C = 255-1; //62.5ns * 4 * 255 = 127.5us.
 1f4:	8e ef       	ldi	r24, 0xFE	; 254
 1f6:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>
	_DEL_R_VALUE(0); //Sortie Rouge.
 1fa:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
	_DEL_V_VALUE(0); //Sortie Vert.
 1fe:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
	_DEL_B_VALUE(0); //Sortie Bleu.
 202:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
 206:	08 95       	ret

00000208 <ledControlInit>:
}

void ledControlInit()
{
	_timer1Init();
 208:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_timer1Init>
	_timer4Init();
 20c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_timer4Init>
	
	DEL_R_INIT();
 210:	3f 9a       	sbi	0x07, 7	; 7
	DEL_V_INIT();
 212:	26 9a       	sbi	0x04, 6	; 4
	DEL_B_INIT();
 214:	57 9a       	sbi	0x0a, 7	; 10
 216:	08 95       	ret

00000218 <main>:
#include <avr/io.h>
#include "ledControl.h"

int main(void)
{
    ledControlInit();
 218:	0e 94 04 01 	call	0x208	; 0x208 <ledControlInit>
    while (1) 
    {
		ledControl(0);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 7c 00 	call	0xf8	; 0xf8 <ledControl>
 222:	fc cf       	rjmp	.-8      	; 0x21c <main+0x4>

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
